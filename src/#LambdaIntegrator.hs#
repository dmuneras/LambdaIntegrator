module Main where
import Semantica
import GramaticaConcreta
import GramaticaAbstracta
import UU.Parsing
import Graphics.UI.Gtk
import Graphics.UI.Gtk.Glade

process ::(EntryClass e)=> String -> e  -> IO ()
process s e = do a <- parseIO pItg (itgScanTxt s)
                 let st = eval a
                 set e [ entryText := show st ]

main = do
  initGUIFDiv (FMult (FConst 0.25) (FSum (FSum (FMult (FConst 1.0) (FVar 'y')) (FMult (FConst 2.0) (FVar 'y'))) (FSum (FMult (FConst 2.0) (FSum (FConst 0.0) (FMult (FConst 1.5) (FVar 'y')))) (FMult (FConst 4.0) (FSum (FSum (FConst 0.0) (FMult (FConst 1.25) (FVar 'y'))) (FMult (FConst 1.75) (FVar 'y'))))))) (FConst 3.0)
  Just xml    <- xmlNew "interfazintegrador.glade"
  ventana     <- xmlGetWidget xml castToWindow "window1"
  onDestroy ventana mainQuit
  boton   <- xmlGetWidget xml castToButton "button1"
  entrada <- xmlGetWidget xml castToEntry "entry1"
  salida  <- xmlGetWidget xml castToEntry "entry2"
  onClicked boton $ do
        texto <- get entrada entryText
        process texto salida
  onEntryActivate entrada $ do
        texto <- get entrada entryText
        process texto salida
  widgetShowAll ventana
  mainGUI
